#pragma once

#if defined(AP_INT_BACKEND)
template<size_t W, size_t is_signed>
using vivado_backend = hint_base<W, ap_int_base, is_signed>;

template<size_t W, bool is_signed>
template<size_t high, size_t low>
vivado_backend<high - low, is_signed> vivado_backend<W, is_signed>::slice(
		enable_if<(high >= low)>::type* = 0
	) const
{	
	#pragma HLS INLINE
	return this->range(high, low);
}

template<size_t W, bool is_signed>
template<size_t idx>
vivado_backend<1, is_signed> vivado_backend<W, is_signed>::get(
		enable_if<(idx < W)>::type* = 0
	)
{
	#pragma HLS INLINE
	return (*this)[idx];
}

template<size_t W, bool is_signed>
template<size_t Wrhs, bool is_signed_rhs>
vivado_backend<W+Wrhs, is_signed> vivado_backend<W, is_signed>::concatenate(
		vivado_backend<Wrhs, is_signed_rhs> const & rhs) const {
	#pragma HLS INLINE
	return vivado_backend<W+Wrhs, is_signed>{(*this).concatenate(rhs)};
}
#endif

#if defined(AC_INT_BACKEND)
template<size_t W, size_t is_signed>
using quartus_backend = hint_base<W, ac_int, is_signed>;

template<size_t W, bool is_signed>
template<size_t high, size_t low>
quartus_backend<high - low, is_signed> quartus_backend<W, is_signed>::slice(
		enable_if<(high >= low)>::type* = 0
	) const
{	
	//TODO HLS INLINE FOR INTEl
	return this->slc<high-low+1>(low);	
}

template<size_t W, bool is_signed>
template<size_t idx>
quartus_backend<1, is_signed> quartus_backend<W, is_signed>::get(
		enable_if<(idx < W)>::type* = 0
	)
{
	return (*this)[idx];
}

template<size_t W, bool is_signed>
template<size_t Wrhs, bool is_signed_rhs>
quartus_backend<W+Wrhs, is_signed> quartus_backend<W, is_signed>::concatenate(
		quartus_backend<Wrhs, is_signed_rhs> const & rhs) const {
	quartus_backend<W+Wrhs, is_signed>::backend_type result;
	result.set_slc(0, rhs);
	result.set_slc(Wrhs, *this);
	return  quartus_backend<W+Wrhs, is_signed>{result};
}
#endif

#if defined(BITSET_BACKEND)
template<size_t W, size_t is_signed>
using bitset_backend = hint_base<W, ac_int, is_signed>;

template<size_t W, bool is_signed>
template<size_t high, size_t low>
bitset_backend<high - low + 1, is_signed> bitset_backend<W, is_signed>::slice(
		enable_if<(high >= low)>::type* = 0
	) const
{	
	bitset<high-low+1> result;
	for (size_t i = low; i <= high ; ++i) {
		result[i-low] = (*this)[i];
	}
	return result;
}

template<size_t W, bool is_signed>
template<size_t idx>
bitset_backend<1, is_signed> bitset_backend<W, is_signed>::get(
		enable_if<(idx < W)>::type* = 0
	)
{
	bitset<1> result{(*this)[idx]};
	return result;
}

template<size_t W, bool is_signed>
template<size_t Wrhs, bool is_signed_rhs>
bitset_backend<W+Wrhs, is_signed> bitset_backend<W, is_signed>::concatenate(
		bitset_backend<Wrhs, is_signed_rhs> const & rhs) const {
	bitset_backend<W+Wrhs, is_signed>::backend_type result;
	bitset<W+Wrhs> result;
	for (size_t i = 0, i < Wrhs ; ++i) {
		result[i] = rhs[i];
	}
	for (size_t i = 0 ; i < W ; ++i) {
		result[i + Wrhs] = (*this)[i];
	}
	return result;
}
	
#endif
